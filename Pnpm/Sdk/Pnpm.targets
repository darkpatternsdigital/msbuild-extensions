<Project>
    <PropertyGroup>
        <PnpmBuildScript Condition=" '$(PnpmBuildScript)' == '' ">pnpm run --if-present build</PnpmBuildScript>
        <PnpmTestScript Condition=" '$(PnpmTestScript)' == '' ">pnpm run --if-present test</PnpmTestScript>
        <PnpmLintScript Condition=" '$(PnpmLintScript)' == '' ">pnpm run --if-present lint</PnpmLintScript>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(UseCorepack)' == 'true' ">
        <PnpmBuildScript Condition="$(PnpmBuildScript.StartsWith('pnpm '))">corepack $(PnpmBuildScript)</PnpmBuildScript>
        <PnpmTestScript Condition="$(PnpmTestScript.StartsWith('pnpm '))">corepack $(PnpmTestScript)</PnpmTestScript>
        <PnpmLintScript Condition="$(PnpmLintScript.StartsWith('pnpm '))">corepack $(PnpmLintScript)</PnpmLintScript>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(PnpmRootPath)' == '' ">
        <PnpmRootPath Condition=" '$(SolutionRoot)' != '' ">$(SolutionRoot)</PnpmRootPath>
        <PnpmRootPath Condition=" '$(PnpmRootPath)' == '' and '$(DirectoryBuildPropsPath)' != '' ">$([MSBuild]::EnsureTrailingSlash($([System.IO.Path]::GetDirectoryName('$(DirectoryBuildPropsPath)'))))</PnpmRootPath>
        <PnpmRootPath Condition=" '$(PnpmRootPath)' == '' ">$(ProjectDir)</PnpmRootPath>
    </PropertyGroup>
    <PropertyGroup>
        <PnpmStepRecordDir Condition=" '$(PnpmStepRecordDir)' == '' ">$(ProjectDir)node_modules\</PnpmStepRecordDir>
        <!-- pnpm allows an install for the entire solution -->
        <PnpmInstallProjectPath Condition=" '$(PnpmInstallProjectPath)' == '' and '$(ArtifactsPath)' != '' ">$(ArtifactsPath)/pnpm-install.csproj</PnpmInstallProjectPath>
        <PnpmInstallRecordPath Condition=" '$(PnpmInstallRecordPath)' == '' ">$(PnpmRootPath)node_modules\_.install.$(Configuration)._</PnpmInstallRecordPath>
        <PnpmLintRecordPath Condition=" '$(PnpmLintRecordPath)' == '' ">$(PnpmStepRecordDir)_.lint.$(Configuration)._</PnpmLintRecordPath>
    </PropertyGroup>
    <PropertyGroup>
        <LintSkipDotnet Condition=" '$(LintSkipDotnet)' == '' ">true</LintSkipDotnet>
    </PropertyGroup>
    <ItemGroup>
        <ProjectReference Include="$(PnpmInstallProjectPath)" />
    </ItemGroup>

    <ItemGroup Condition=" '@(RestoreConfig)' == '' ">
        <RestoreConfig Include="$(PnpmRootPath)package.json" />
        <RestoreConfig Include="$(PnpmRootPath)pnpm-lock.yaml" />
        <RestoreConfig Include="package.json" />
    </ItemGroup>
    <ItemGroup Condition=" '@(CompileConfig)' == '' ">
        <CompileConfig Include=".*rc" Exclude="@(RestoreConfig)" />
        <CompileConfig Include="*.json" Exclude="@(RestoreConfig)" />
    </ItemGroup>
    <ItemGroup Condition=" '@(Compile)' == '' ">
        <Compile Include="src/**" Watch="false" />
    </ItemGroup>
    <ItemGroup>
        <Watch Include="@(CompileConfig)" />
        <Watch Include="@(RestoreConfig)" />
    </ItemGroup>
    <ItemGroup Condition=" '@(PnpmPackagedFiles)' == '' ">
        <PnpmPackagedFiles Include="@(CompileConfig)" />
        <PnpmPackagedFiles Condition="Exists('.npmignore')" Include=".npmignore" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="JsonPeek" Version="1.2.0" PrivateAssets="All" />
    </ItemGroup>

    <Target Name="_LoadPackageJson" BeforeTargets="PnpmPack">
        <JsonPeek ContentPath="package.json" Query="$.name">
            <Output TaskParameter="Result" ItemName="NpmPackageName" />
        </JsonPeek>
        <JsonPeek ContentPath="package.json" Query="$.version">
            <Output TaskParameter="Result" ItemName="NpmPackageVersion" />
        </JsonPeek>

        <PropertyGroup>
            <NpmPackageNormalizedName>@(NpmPackageName->'%(Identity)'->Replace("@", "")->Replace("/", "-"))</NpmPackageNormalizedName>
            <NpmPackageVersion>@(NpmPackageVersion->'%(Identity)')</NpmPackageVersion>
            <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
        </PropertyGroup>
    </Target>

    <Target Name="SetupRootInstalProject"
        Condition=" '$(ArtifactsPath)' != '' "
        BeforeTargets="CollectPackageReferences;_GenerateRestoreProjectPathItemsAllFrameworks"
        Inputs="$(MSBuildThisFileDirectory)pnpm-install/pnpm-install.targets"
        Outputs="$(PnpmInstallProjectPath)"
    >
        <PropertyGroup>
            <PnpmInstallProjectContents><![CDATA[
<Project Sdk="Microsoft.Build.NoTargets/3.7.0">
	<PropertyGroup>
		<PnpmRootPath>$(PnpmRootPath)</PnpmRootPath>
	</PropertyGroup>
	<Import Project="$(MSBuildThisFileDirectory)pnpm-install/pnpm-install.targets" />
</Project>
            ]]></PnpmInstallProjectContents>
        </PropertyGroup>
        <WriteLinesToFile
            File="$(PnpmInstallProjectPath)"
            Overwrite="true"
            Lines="$(PnpmInstallProjectContents)" />
    </Target>

    <Target Name="PnpmInstall"
        BeforeTargets="Restore;_GenerateProjectRestoreGraph"
        Inputs="@(RestoreConfig)"
        Outputs="$(PnpmInstallRecordPath)"
        Condition=" '$(PnpmRootPath)' != '' and '$(PnpmInstallProjectPath)' == '' ">
        <Warning
            Code="DPD_PNPM_001"
            Text="Ensure &lt;UseArtifactsOutput&gt;true&lt;/UseArtifactsOutput&gt; is added to your Directory.Build.Props or set the location for a generated project in PnpmInstallProjectPath." />
        <MsBuild
            Projects="$(MSBuildThisFileDirectory)pnpm-install/pnpm-install.esproj"
            Targets="PnpmInstall"
            BuildInParallel="false"
            Properties="SolutionRoot=$(PnpmRootPath)" />
    </Target>

    <Target Name="NodeBuild"
        Condition="'$(PnpmBuildScript)' != ''"
        BeforeTargets="Build"
        Inputs="@(Compile);@(RestoreConfig);@(CompileConfig)"
        Outputs="@(CompileOutputs)">
        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmBuildScript)" />
        <Touch ForceTouch="true" Files="@(CompileOutputs)" />
    </Target>

	<Target Name="PrepareLint" BeforeTargets="Lint" />

	<Target Name="Lint"
	        BeforeTargets="BeforeBuild" />

    <Target Name="_PnpmLint"
        BeforeTargets="BeforeBuild"
        Condition="'$(PnpmLintScript)' != '' and '$(LintSkipPnpm)' != 'true' "
        Inputs="@(Compile);@(RestoreConfig);@(CompileConfig)"
        Outputs="$(PnpmLintRecordPath)">
        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmLintScript)" />
        <Touch ForceTouch="true" Files="@(PnpmLintRecordPath)" />
    </Target>

    <Target Name="PnpmPack_PreVersion" BeforeTargets="PnpmPack" DependsOnTargets="_LoadPackageJson">
        <!-- Get current last-modified timestamp -->
        <PropertyGroup>
            <PackageJsonLastModifiedTime>$([System.IO.File]::GetLastWriteTime('package.json').ToString('g'))</PackageJsonLastModifiedTime>
        </PropertyGroup>
        <!-- Update the package.json to use the $(Version) value -->
        <Exec WorkingDirectory="$(ProjectDir)"
            Command="npm version $(Version)"
            IgnoreExitCode="true"
            Condition=" '$(NpmPackageVersion)' != '$(Version)' "
            EchoOff="true"
            StandardOutputImportance="low"
            />
    </Target>

    <Target Name="PnpmPack" BeforeTargets="Publish" DependsOnTargets="NodeBuild" Inputs="@(RestoreConfig);@(PnpmPackagedFiles);@(CompileOutputs)" Outputs="$(PackageOutputPath)$(NpmPackageNormalizedName)-$(NpmPackageVersion).tgz">
        <!-- Build and move the pnpm package file -->
        <MakeDir Directories="$(PackageOutputPath)"/>
        <Exec WorkingDirectory="$(ProjectDir)"
            Command="pnpm pack"
            EchoOff="true"
            StandardOutputImportance="low"
            />
        <Move SourceFiles="$(NpmPackageNormalizedName)-$(Version).tgz" DestinationFolder="$(PackageOutputPath)" />
    </Target>

    <Target Name="PnpmPack_PostVersion" AfterTargets="PnpmPack" DependsOnTargets="NodeBuild;PnpmPack_PreVersion">
        <PropertyGroup>
            <!-- We always want the .NET VersionPrefix to be in the package.json when we're done -->
            <NpmTargetPackageVersion>$(VersionPrefix)</NpmTargetPackageVersion>
        </PropertyGroup>
        <!-- Restore the version -->
        <Exec WorkingDirectory="$(ProjectDir)"
            Command="npm version $(NpmTargetPackageVersion)"
            IgnoreExitCode="true"
            Condition=" '$(NpmTargetPackageVersion)' != '$(Version)' "
            EchoOff="true"
            StandardOutputImportance="low"
            />
        <!-- Put the timestamp back on this; it only changed the version number -->
        <Touch Files="package.json" Time="$(PackageJsonLastModifiedTime)" />
    </Target>

    <Target Name="VSTest_pnpm" BeforeTargets="VSTest" Condition=" '$(PnpmTestScript)' != '' ">
        <CallTarget Condition="'$(VSTestNoBuild)' != 'true'" Targets="Build" />

        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmTestScript)" />
    </Target>

    <Target Name="_PackOnBuild" AfterTargets="Build" DependsOnTargets="PnpmPack" Condition="'$(PackPnpmOnBuild)'=='true'" />

</Project>