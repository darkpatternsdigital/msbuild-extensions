<Project>
    <PropertyGroup>
        <ImportByWildcardAfterMicrosoftCommonTargets>false</ImportByWildcardAfterMicrosoftCommonTargets>
        <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>

        <PnpmBuildScript Condition=" '$(PnpmBuildScript)' == '' ">pnpm run --if-present build</PnpmBuildScript>
        <PnpmTestScript Condition=" '$(PnpmTestScript)' == '' ">pnpm run --if-present test</PnpmTestScript>
        <PnpmLintScript Condition=" '$(PnpmLintScript)' == '' ">pnpm run --if-present lint</PnpmLintScript>

        <PnpmRootPath Condition=" '$(SolutionRoot)' != '' ">$(SolutionRoot)</PnpmRootPath>
        <PnpmRootPath Condition=" '$(SolutionRoot)' == '' ">$(ProjectDir)</PnpmRootPath>
        <PnpmStepRecordDir Condition=" '$(PnpmStepRecordDir)' == '' ">$(ProjectDir)node_modules\</PnpmStepRecordDir>
        <!-- pnpm allows an install for the entire solution -->
        <PnpmInstallRecordPath Condition=" '$(PnpmInstallRecordPath)' == '' ">$(PnpmRootPath)node_modules\_.install.$(Configuration)._</PnpmInstallRecordPath>
        <PnpmLintRecordPath Condition=" '$(PnpmLintRecordPath)' == '' ">$(PnpmStepRecordDir)_.lint.$(Configuration)._</PnpmLintRecordPath>

        <PnpmInstallScript Condition=" '$(PnpmInstallScript)' == '' and $(Configuration) != 'Release' ">pnpm install</PnpmInstallScript>
        <PnpmInstallScript Condition=" '$(PnpmInstallScript)' == '' and $(Configuration) == 'Release' ">pnpm install --frozen-lockfile</PnpmInstallScript>
    </PropertyGroup>

    <ItemGroup>
        <Compile Include="src/**" Watch="false" />
        <RestoreConfig Include="$(PnpmRootPath)package.json" />
        <RestoreConfig Include="$(PnpmRootPath)pnpm-lock.yaml" />
        <RestoreConfig Include="package.json" />
        <Watch Include="@(RestoreConfig)" />

        <PnpmPackagedFiles Condition=" '$(PnpmPackagedFiles)' == '' " Include="@(CompileConfig)" />
        <PnpmPackagedFiles Condition="Exists('.npmignore')" Include=".npmignore" />

        <PackageReference Include="JsonPeek" Version="1.2.0" PrivateAssets="All" />
    </ItemGroup>

    <Target Name="_LoadPackageJson" BeforeTargets="PnpmPack">
        <JsonPeek ContentPath="package.json" Query="$.name">
            <Output TaskParameter="Result" ItemName="NpmPackageName" />
        </JsonPeek>
        <JsonPeek ContentPath="package.json" Query="$.version">
            <Output TaskParameter="Result" ItemName="NpmPackageVersion" />
        </JsonPeek>

        <PropertyGroup>
            <NpmPackageNormalizedName>@(NpmPackageName->'%(Identity)'->Replace("@", "")->Replace("/", "-"))</NpmPackageNormalizedName>
            <NpmPackageVersion>@(NpmPackageVersion->'%(Identity)')</NpmPackageVersion>
            <VersionPrefix>@(NpmPackageVersion->'%(Identity)')</VersionPrefix>
            <Version>$(VersionPrefix)</Version>
            <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
        </PropertyGroup>
    </Target>

    <Target Name="PnpmInstall"
        BeforeTargets="NodeBuild;Restore;_GenerateProjectRestoreGraph"
        Inputs="@(RestoreConfig)"
        Outputs="$(PnpmInstallRecordPath)"
        Condition=" '$(PnpmRootPath)' != '' ">
        <!-- Runs _PnpmInstall in a critical section, meaning only one  -->
        <MsBuild
            Projects="$(MSBuildThisFileDirectory)pnpm-install/pnpm-install.esproj"
            Targets="PnpmInstall"
            BuildInParallel="false"
            Properties="SolutionRoot=$(PnpmRootPath)" />
    </Target>

    <Target Name="NodeBuild"
        Condition="'$(PnpmBuildScript)' != ''"
        BeforeTargets="Build"
        Inputs="@(Compile);@(RestoreConfig);@(CompileConfig)"
        Outputs="@(CompileOutputs)">
        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmBuildScript)" />
        <Touch ForceTouch="true" Files="@(CompileOutputs)" />
    </Target>

    <Target Name="Lint"
        Condition="'$(PnpmLintScript)' != ''"
        Inputs="@(Compile);@(RestoreConfig);@(CompileConfig)"
        Outputs="$(PnpmLintRecordPath)">
        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmLintScript)" />
        <Touch ForceTouch="true" Files="@(PnpmLintRecordPath)" />
    </Target>

    <Target Name="PnpmPack" BeforeTargets="Publish" DependsOnTargets="NodeBuild" Inputs="@(RestoreConfig);@(PnpmPackagedFiles);@(CompileOutputs)" Outputs="$(PackageOutputPath)$(NpmPackageNormalizedName)-$(NpmPackageVersion).tgz">
        <PropertyGroup>
            <PackageJsonLastModifiedTime>$([System.IO.File]::GetLastWriteTime('package.json').ToString('g'))</PackageJsonLastModifiedTime>
        </PropertyGroup>
        <Exec WorkingDirectory="$(ProjectDir)" Command="npm version $(Version)" IgnoreExitCode="true" Condition=" '$(NpmPackageVersion)' != '$(Version)' " />
        <MakeDir Directories="$(PackageOutputPath)"/>
        <Exec WorkingDirectory="$(ProjectDir)" Command="pnpm pack" />
        <Move SourceFiles="$(NpmPackageNormalizedName)-$(Version).tgz" DestinationFolder="$(PackageOutputPath)" />
        <Exec WorkingDirectory="$(ProjectDir)" Command="npm version $(NpmPackageVersion)" IgnoreExitCode="true" Condition=" '$(NpmPackageVersion)' != '$(Version)' " />
        <Touch Files="package.json" Time="$(PackageJsonLastModifiedTime)" />
    </Target>

    <Target Name="VSTest" Condition=" '$(PnpmTestScript)' != '' ">
        <CallTarget Condition="'$(VSTestNoBuild)' != 'true'" Targets="Build" />

        <Exec WorkingDirectory="$(ProjectDir)" Command="$(PnpmTestScript)" />
    </Target>

    <Target Name="_PackOnBuild" AfterTargets="Build" DependsOnTargets="PnpmPack" Condition="'$(PackPnpmOnBuild)'=='true'" />

</Project>